/*
剑指 Offer 14- I. 剪绳子
https://leetcode-cn.com/problems/jian-sheng-zi-lcof/
给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

示例 1：
输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1

示例 2:
输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
*/

/*
解法：推算可知，3是最优的分段长度，数学推导可以见题解；因此只需得到除以3的余数：如果是2，不再细分；如果是0，则刚好；如果是1，由于2*2>1*3，因此需要拿出一个3进行中和。
执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户
内存消耗：34.9 MB, 在所有 Java 提交中击败了98.99% 的用户
*/
class Solution {
    public int cuttingRope(int n) {
        if(n <= 3)
            return n - 1;
        if(n % 3 == 0)
            return (int)Math.pow(3, n / 3);
        if(n % 3 == 1)
            return (int)Math.pow(3, n / 3 - 1) * 4;
        return (int)Math.pow(3, n / 3) * 2;
    }
}

